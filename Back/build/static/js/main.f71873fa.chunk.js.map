{"version":3,"sources":["pages/HomePage.js","pages/AboutPage.js","components/AppNav.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","callApi","a","link","i","state","substring","length","fetch","response","json","body","status","Error","message","data","name","uv","switch0","start0","end0","eff0","switch1","start1","end1","eff1","handleChange","bind","handleSwitch","askModel","createData","this","then","res","setState","express","catch","err","console","log","event","Object","assign","target","value","apiData","dataString","trim","dataList","split","dataTemp","push","parseFloat","policyList","forms","map","policy","Col","Card","style","window","innerWidth","height","Body","Title","type","indexOf","onChange","Form","Label","Control","placeholder","renderLineChart","width","dataKey","stroke","emptySpace","Container","display","justifyContent","Row","Button","size","variant","onClick","Component","About","AppNav","Navbar","className","expand","NavbarBrand","href","Nav","navbar","NavItem","NavLink","App","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.f71873fa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis } from \"recharts\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      response: \"\",\r\n      data: [{ name: 1, uv: 0 }],\r\n\r\n      switch0: false,\r\n      start0: 10,\r\n      end0: 40,\r\n      eff0: 70,\r\n\r\n      switch1: false,\r\n      start1: 10,\r\n      end1: 40,\r\n      eff1: 70\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSwitch = this.handleSwitch.bind(this);\r\n    this.askModel = this.askModel.bind(this);\r\n    this.createData = this.createData.bind(this);\r\n  }\r\n\r\n  askModel() {\r\n    this.callApi()\r\n      .then(res => this.setState({ response: this.createData(res.express) }))\r\n      .catch(err => console.log(err));\r\n    // console.log(this.state);\r\n  }\r\n\r\n  callApi = async () => {\r\n    let link = \"/api/hello?\";\r\n    for (let i = 0; i < 2; i++) {\r\n      link += \"switch\" + i + \"=\" + this.state[\"switch\" + i] + \"&\";\r\n      link += \"start\" + i + \"=\" + this.state[\"start\" + i] + \"&\";\r\n      link += \"end\" + i + \"=\" + this.state[\"end\" + i] + \"&\";\r\n      link += \"eff\" + i + \"=\" + this.state[\"eff\" + i] + \"&\";\r\n    }\r\n    link = link.substring(0, link.length - 1);\r\n\r\n    // console.log(123);\r\n\r\n    // const response = await fetch(\"/api/hello\"); // link here\r\n    const response = await fetch(link); // link here\r\n    const body = await response.json();\r\n    if (response.status !== 200) throw Error(body.message);\r\n\r\n    // console.log(response);\r\n\r\n    return body;\r\n  };\r\n\r\n  handleChange(event) {\r\n    // this.setState({value: event.target.value, test: event.target.value});\r\n    // console.log(event.target.name);\r\n    this.setState(\r\n      Object.assign({}, this.state, { [event.target.name]: event.target.value })\r\n    );\r\n    // console.log(this.state);\r\n  }\r\n\r\n  handleSwitch(event) {\r\n    // console.log(event.target.name);\r\n    this.setState(\r\n      Object.assign({}, this.state, {\r\n        [event.target.name]: !this.state[event.target.name]\r\n      })\r\n    );\r\n    // console.log(this.state);\r\n  }\r\n\r\n  createData(apiData) {\r\n    // let data = [\r\n    //   { name: 1, uv: 400 },\r\n    //   { name: 2, uv: 500 }\r\n    // ];\r\n    // console.log(apiData.split(\"\\n\"));\r\n    // console.log(apiData);\r\n\r\n    // let dataColumns = apiData.split(\"**splitter**\");\r\n    // for (let i = 0; i < dataColumns.length; i++) {\r\n    //   let dataString = dataColumns[i].trim();\r\n    //   let dataList = dataString.substring(1, dataString.length - 1).split(\" \");\r\n    //   console.log(dataList);\r\n    //   console.log(dataList.length);\r\n    // }\r\n\r\n    let dataString = apiData.trim();\r\n    let dataList = dataString.substring(1, dataString.length - 1).split(\" \");\r\n    // console.log(dataList);\r\n    // console.log(dataList.length);\r\n\r\n    // data: [{ name: 1, uv: 0 }]\r\n\r\n    let dataTemp = [];\r\n    for (let i = 0; i < dataList.length; i++) {\r\n      dataTemp.push({ name: i, uv: parseFloat(dataList[i].trim(\",\")) });\r\n    }\r\n\r\n    this.setState(Object.assign({}, this.state, { data: dataTemp }));\r\n    // console.log(this.state.data);\r\n\r\n    return this.state.response;\r\n  }\r\n\r\n  render() {\r\n    let policyList = [\"Self Quarantine\", \"Social Distancing\"];\r\n\r\n    let forms = policyList.map(policy => (\r\n      <Col>\r\n        <Card style={({ width: window.innerWidth / 2.5 }, { height: 300 })}>\r\n          <Card.Body>\r\n            <Card.Title>{policy}</Card.Title>\r\n            <div>\r\n              <input\r\n                type=\"checkbox\"\r\n                name={\"switch\" + policyList.indexOf(policy)}\r\n                onChange={this.handleSwitch}\r\n              ></input>\r\n            </div>\r\n            <div>\r\n              {this.state[\"switch\" + policyList.indexOf(policy)] ? (\r\n                <Form>\r\n                  <Form.Label>Start Date (from 0 to 360)</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    value={this.state[\"start\" + policyList.indexOf(policy)]}\r\n                    name={\"start\" + policyList.indexOf(policy)}\r\n                    onChange={this.handleChange}\r\n                    placeholder=\"Start\"\r\n                  />\r\n                  <Form.Label>End Date (from 0 to 360)</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    value={this.state[\"end\" + policyList.indexOf(policy)]}\r\n                    name={\"end\" + policyList.indexOf(policy)}\r\n                    onChange={this.handleChange}\r\n                    placeholder=\"End\"\r\n                  />\r\n                  <Form.Label>Effectivness (from 0 to 100 %)</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    value={this.state[\"eff\" + policyList.indexOf(policy)]}\r\n                    name={\"eff\" + policyList.indexOf(policy)}\r\n                    onChange={this.handleChange}\r\n                    placeholder=\"Effectivness\"\r\n                  />\r\n                </Form>\r\n              ) : null}\r\n            </div>\r\n          </Card.Body>\r\n        </Card>\r\n      </Col>\r\n    ));\r\n\r\n    const renderLineChart = (\r\n      <LineChart\r\n        width={window.innerWidth / 1.4}\r\n        height={300}\r\n        data={this.state.data}\r\n      >\r\n        <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\r\n        <CartesianGrid stroke=\"#ccc\" />\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n      </LineChart>\r\n    );\r\n\r\n    const emptySpace = (\r\n      <Container\r\n        style={({ width: window.innerWidth }, { height: 50 })}\r\n      ></Container>\r\n    );\r\n\r\n    return (\r\n      <Container>\r\n        {emptySpace}\r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <h1>Covid19 Pandemic Simulator</h1>\r\n          <h2>{this.state.response}</h2>\r\n        </div>\r\n        {emptySpace}\r\n\r\n        <Row>{forms}</Row>\r\n        {/* <button type=\"submit\" onClick={this.callApi}>\r\n          Submit\r\n        </button> */}\r\n        {emptySpace}\r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <Button size=\"lg\" variant=\"outline-primary\" onClick={this.askModel}>\r\n            Run Model\r\n          </Button>{\" \"}\r\n        </div>\r\n        {emptySpace}\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <Card style={{ width: window.innerWidth / 1.2 }}>\r\n                <Card.Body>\r\n                  <Card.Title>Infected asymtomatic</Card.Title>\r\n                  {renderLineChart}\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport { Container } from \"reactstrap\";\r\n\r\nclass About extends Component {\r\n  render() {\r\n    const emptySpace = (\r\n      <Container\r\n        style={({ width: window.innerWidth }, { height: 50 })}\r\n      ></Container>\r\n    );\r\n\r\n    return (\r\n      <Container>\r\n        {emptySpace}\r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <h1>Covid19 Pandemic Simulator</h1>\r\n        </div>\r\n        {emptySpace}\r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <h2>Test the full model yourself</h2>\r\n        </div>\r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <h2>https://github.com/kaetze66/coronamodel</h2>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from \"react\";\r\nimport { Nav, Navbar, NavbarBrand, NavItem, NavLink } from \"reactstrap\";\r\n\r\nclass AppNav extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar className=\"navbar-light bg-light\" expand=\"md\">\r\n          <NavbarBrand href=\"/\">Covid19 Pandemic Simulator</NavbarBrand>\r\n          <Nav className=\"ml-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"/\">Home</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"/about\">About</NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppNav;\r\n","import \"./App.css\";\nimport Home from \"./pages/HomePage\";\n// import Test from \"./pages/Test\";\nimport About from \"./pages/AboutPage\";\nimport AppNav from \"./components/AppNav\";\nimport React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div>\n      <AppNav></AppNav>\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" exact={true} component={Home} />\n          <Route path=\"/about\" exact={true} component={About} />\n          {/* <Route path=\"/test\" exact={true} component={Test} /> */}\n          <Route path=\"*\" component={() => \"404 NOT FOUND\"} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}